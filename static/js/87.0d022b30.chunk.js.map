{"version":3,"file":"static/js/87.0d022b30.chunk.js","mappings":"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","sources":["../node_modules/react-router-dom/dom.ts"],"sourcesContent":["import type { FormEncType, FormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n"],"names":["routes","opts","createRouter","basename","history","createBrowserHistory","hydrationData","parseHydrationData","enhanceManualRouteObjects","initialize","createHashHistory","state","_window","__staticRouterHydrationData","errors","deserializeErrors","entries","serialized","val","useState","setState","useLayoutEffect","listen","Router","navigationType","navigator","HashRouter","_ref2","HistoryRouter","_ref3","internalOnClick","submitMethod","startsWith","currentTarget","fetcherKey","ScrollRestoration","defaultMethod","storageKey","useScrollRestoration","invariant","DataRouterHook","DataRouterStateHook","getDataRouterConsoleError","hookName","path","useDataRouterContext","ctx","DataRouterContext","useDataRouterState","_temp","replaceProp","useHref","origin","navigate","useNavigate","useCallback","pathname","shouldProcessLinkClick","createPath","useSearchParams","defaultInit","object","defaultSearchParamsRef","e","disableScrollRestoration","enableScrollRestoration","isInputElement","isButtonElement","routeContext","tagName","_ref","v5Compat","children","historyRef","React","useRef","BrowserRouter","current","SCROLL_RESTORATION_STORAGE_KEY","FetcherForm","isModifiedEvent","hasSetSearchParamsRef","getSearchParamsForLocation","sessionStorage","setItem","el","getElementById","callback","capture","document","displayName","isBrowser","createElement","Link","forwardRef","LinkWithRef","join","removeEventListener","usePrompt","_ref8","when"],"sourceRoot":""}